/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/stolostron/hub-of-hubs-operator/apis/hubofhubs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AgentConfigLister helps list AgentConfigs.
// All objects returned here must be treated as read-only.
type AgentConfigLister interface {
	// List lists all AgentConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AgentConfig, err error)
	// AgentConfigs returns an object that can list and get AgentConfigs.
	AgentConfigs(namespace string) AgentConfigNamespaceLister
	AgentConfigListerExpansion
}

// agentConfigLister implements the AgentConfigLister interface.
type agentConfigLister struct {
	indexer cache.Indexer
}

// NewAgentConfigLister returns a new AgentConfigLister.
func NewAgentConfigLister(indexer cache.Indexer) AgentConfigLister {
	return &agentConfigLister{indexer: indexer}
}

// List lists all AgentConfigs in the indexer.
func (s *agentConfigLister) List(selector labels.Selector) (ret []*v1alpha1.AgentConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AgentConfig))
	})
	return ret, err
}

// AgentConfigs returns an object that can list and get AgentConfigs.
func (s *agentConfigLister) AgentConfigs(namespace string) AgentConfigNamespaceLister {
	return agentConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AgentConfigNamespaceLister helps list and get AgentConfigs.
// All objects returned here must be treated as read-only.
type AgentConfigNamespaceLister interface {
	// List lists all AgentConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AgentConfig, err error)
	// Get retrieves the AgentConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AgentConfig, error)
	AgentConfigNamespaceListerExpansion
}

// agentConfigNamespaceLister implements the AgentConfigNamespaceLister
// interface.
type agentConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AgentConfigs in the indexer for a given namespace.
func (s agentConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AgentConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AgentConfig))
	})
	return ret, err
}

// Get retrieves the AgentConfig from the indexer for a given namespace and name.
func (s agentConfigNamespaceLister) Get(name string) (*v1alpha1.AgentConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("agentconfig"), name)
	}
	return obj.(*v1alpha1.AgentConfig), nil
}
